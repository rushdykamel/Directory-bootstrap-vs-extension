{"version":3,"file":"extension.js","mappings":"2GAAA,cAQA,oBAAyBA,GACvB,MAAMC,EAAQD,EAASE,MAAM,QAC7B,IAAIC,EAAwB,GAc5B,OAZAF,EAAMG,SAASC,IAEb,IAAIC,GAAS,EACb,IAFiB,IAAAC,UAASF,GAEbG,SAAS,OAASH,EAAKI,SAAS,KAAM,CACjDH,GAAS,EACT,MAAMI,GAAU,IAAAC,SAAQN,GACpBK,GAAuB,MAAZA,GAAiBP,EAAQS,KAAK,CAAEC,KAAM,SAAUC,KAAMJ,G,CAGnEL,GAAMF,EAAQS,KAAK,CAAEC,KAAMP,EAAS,OAAS,SAAUQ,KAAMT,GAAO,IAGnEF,CACT,C,UCzBAY,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,SCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCtBA,eACA,SACA,SAEA,oBAAyBQ,GACxB,MAAMC,EAAsBC,EAAOC,SAASC,gBAAgB,+BAA+B,KAC1F,IAAIC,EAAkBH,EAAOI,UAAUC,iBAAmBL,EAAOI,UAAUC,iBAAiB,GAAK,KACjG,GAAIF,EAAiB,CACpB,IAAIG,EAAqBH,EAAgBI,IAAIC,OAC7C,MAAMC,EAAST,EAAOU,OAAOC,iBAE7B,GAAIF,EAAQ,CACX,MAAMG,EAAYH,EAAOG,UACnBC,EAAeJ,EAAOK,SAASC,QAAQH,GAExCC,GAGY,IAAAG,UAASH,GACjBnC,SAASuC,IAChB,MAAMC,EAAW,GAAGZ,KAAcW,EAAE7B,QAC/B,IAAA+B,YAAWD,GAQflB,EAAOU,OAAOU,uBAAuB,IAAIH,EAAE7B,2BAP5B,SAAX6B,EAAE9B,MACL,IAAAkC,eAAcH,EAAU,KAExB,IAAAI,WAAUJ,EAAU,CAAEK,WAAW,IAElCvB,EAAOU,OAAOU,uBAAuB,IAAIH,EAAE7B,uC,IAX7CY,EAAOU,OAAOU,uBAAuB,oB,MAmBtCpB,EAAOU,OAAOU,uBAAuB,mB,KAMxCtB,EAAQ0B,cAActC,KAAKa,EAC5B,EAKA,wBAA+B,C","sources":["webpack://directory-bootstrap/./src/fileUtils.ts","webpack://directory-bootstrap/external commonjs \"vscode\"","webpack://directory-bootstrap/external node-commonjs \"fs\"","webpack://directory-bootstrap/external node-commonjs \"path\"","webpack://directory-bootstrap/webpack/bootstrap","webpack://directory-bootstrap/./src/extension.ts"],"sourcesContent":["import { basename, dirname } from 'path';\r\n\r\n\r\nexport type PathResult = {\r\n  type: 'file' | 'folder'\r\n  path: string\r\n};\r\n\r\nexport function getPaths(fullText: string): PathResult[] {\r\n  const lines = fullText.split('\\r\\n');\r\n  let results: PathResult[] = [];\r\n\r\n  lines.forEach((line) => {\r\n    const fileName = basename(line);\r\n    let isFile = false;\r\n    if (fileName.includes('.') && !line.endsWith('/')) {\r\n      isFile = true;\r\n      const dirName = dirname(line);\r\n      if (dirName && dirName !== '.') results.push({ type: 'folder', path: dirName });\r\n    }\r\n\r\n    if (line) results.push({ type: isFile ? 'file' : 'folder', path: line });\r\n  });\r\n\r\n  return results;\r\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport * as vscode from 'vscode';\nimport { PathResult, getPaths } from './fileUtils';\n\nexport function activate(context: vscode.ExtensionContext) {\n\tconst createFolderCommand = vscode.commands.registerCommand('directoryBootstrap.generate', () => {\n\t\tlet workSpaceFolder = vscode.workspace.workspaceFolders ? vscode.workspace.workspaceFolders[0] : null;\n\t\tif (workSpaceFolder) {\n\t\t\tlet rootFolder: string = workSpaceFolder.uri.fsPath;\n\t\t\tconst editor = vscode.window.activeTextEditor;\n\t\t\t\n\t\t\tif (editor) {\n\t\t\t\tconst selection = editor.selection;\n\t\t\t\tconst selectedText = editor.document.getText(selection);\n\t\t\t\t\n\t\t\t\tif (!selectedText) {\n\t\t\t\t\tvscode.window.showInformationMessage('No text selected!');\n\t\t\t\t} else {\n\t\t\t\t\tconst results = getPaths(selectedText);\n\t\t\t\t\tresults.forEach((p: PathResult) => {\n\t\t\t\t\t\tconst fullPath = `${rootFolder}/${p.path}`;\n\t\t\t\t\t\tif (!existsSync(fullPath)) {\n\t\t\t\t\t\t\tif (p.type === 'file') {\n\t\t\t\t\t\t\t\twriteFileSync(fullPath, '');\t\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmkdirSync(fullPath, { recursive: true });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvscode.window.showInformationMessage(`'${p.path}' has been created successfully`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvscode.window.showInformationMessage(`'${p.path}' already exists..`);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tvscode.window.showInformationMessage('No active editor');\n\t\t\t}\n\t\t}\n\n\t});\n\n\tcontext.subscriptions.push(createFolderCommand);\n}\n\n\n\n// This method is called when your extension is deactivated\nexport function deactivate() { }\n"],"names":["fullText","lines","split","results","forEach","line","isFile","basename","includes","endsWith","dirName","dirname","push","type","path","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","createFolderCommand","vscode","commands","registerCommand","workSpaceFolder","workspace","workspaceFolders","rootFolder","uri","fsPath","editor","window","activeTextEditor","selection","selectedText","document","getText","getPaths","p","fullPath","existsSync","showInformationMessage","writeFileSync","mkdirSync","recursive","subscriptions"],"sourceRoot":""}